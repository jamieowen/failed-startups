{"title":"Lessons Learned","favicon":"https://s2.wp.com/i/favicon.ico","description":"As we've begun to wrap things up here at Devver, we've had the chance to reflect a bit on our experience. Although shutting down is not the outcome we wanted, it's clear to both Dan and I that doing a startup has been an amazing learning experience. While we still have a lot to learn,…","lang":"en","canonicalLink":"https://devver.wordpress.com/2010/04/26/lessons-learned/","tags":["Devver","lessons","minimum viable product","TechStars"],"image":"https://s0.wp.com/i/blank.jpg","videos":[],"text":"As we’ve begun to wrap things up here at Devver, we’ve had the  chance to reflect a bit on our experience. Although shutting down is not  the outcome we wanted, it’s clear to both Dan and I that doing a  startup has been an amazing learning experience. While we still have a  lot to learn, we wanted to share some of the most important lessons  we’ve learned during this time.\n\nWhen we  started Devver, we were hesitant to ask for feedback and help. We  quickly found that people are incredibly helpful and generous with their  time. Users were willing to take a chance and use our products while  giving us valuable feedback. Fellow Rubyists gave us ideas and helped us  with technical problems. Mentors made time for meetings and introduced  us to others who could assist us. And other entrepreneurs, both new and  seasoned, were happy to share stories, compare experiences, and offer  support.\n\nIf you are working on a startup, don’t be afraid to ask  for help! The vast majority of people want to help you succeed, provided  that you respect them and their time. That means you need to prepare  adequately (do your research and ask good questions), figure out their  preferred methods of communication (e.g. don’t call if they prefer  email), show up on time, don’t overburden them, and thank them. And when  other people need your help, give back!\n\nYou can build awesome  relationships with various communities on your own, but we strongly  recommend joining a mentorship program like TechStars.  The program accelerated the process of connecting with mentors, users,  and other entrepreneurs by providing an amazing community during the  summer (and to this day). The advice, introductions, and support have  been simply incredible.\n\nDan and I  are both technical founders. Looking back, it would have been to our  advantage to have a third founder who really loved the business aspect  of running a startup.\n\nThere is a belief (among technical  founders) that technical founders are sufficient for a successful  startup. Or, put more harshly, that you can teach a hacker business, but you can’t  teach a businessman how to hack you can teach a hacker business, but you can’t  teach a businessman how to hack “. I don’t want to argue whether  that’s true or not. Clearly there are  examples  of technical founders being  sufficient to get a company going, but my point is that having solely  technical founders is non-optimal. You can teach a hacker business, but  you can’t make him or her get excited about it, which means it may not  get the time or attention it deserves.\n\nHackers are passionate  about, well, hacking. And so we tend to measure progress in terms of  features completed or lines of code written. Clearly, code needs to be  written, but ideally a startup would have a founder who is working on  important non-technical tasks: talking with customers, measuring key  metrics, developing distribution channels, etc. I’m not advocating that  only one founder works on these tasks while technical founders ignore  customer development – everyone needs to get involved. Rather, I’m  pointing out that given a choice, technical founders will tend to solve  problems technically and having a founder who has the opposite default  is valuable.\n\nWe embraced  working remotely: we hired Avdi to work in Pennsylvania while Dan and I lived in  Boulder and later on, Dan moved to Washington, DC. There are many benefits to having a  distributed team, but two stood out in our experience. First, we could  hire top talent without having to worry about location (in fact, our  flexibility regarding location was very attractive to most candidates we  interviewed). Secondly, being in different locations allowed every team  member to work with minimal distractions, which is invaluable when it  comes to efficiently writing good code.\n\nThat said, communication  was a challenge. To ensure we were all synced up, we had a daily standup  as well as a weekly review. When Dan moved to DC, he and I scheduled  another weekly meeting with no set agenda to just bring up all the  issues, large and small, that were on our minds. We also all got  together in the same location every few months to work in the same room  and rekindle our team energy.\n\nAlso, pair programming was  difficult to do remotely and we never came up with a great solution. As a  result, we spent less than a day pairing a week on average.\n\nThe  most significant drawback to a remote team is the administrative hassle.  It’s a pain to manage payroll, unemployment, insurance, etc in one  state. It’s a freaking nightmare to manage in three states (well, two  states and a district), even though we paid a payroll  service to take care of it. Apparently, once your startup gets  larger, there are companies that will manage this with minimal  hassle, but for a small team, it was a major annoyance and distraction.\n\nMost of the mistakes we made developing our test  accelerator and, later, Caliper boiled down to one thing: we should have  focused more on customer development and finding a minimum viable  product (MVP).\n\nThe first thing we worked on was our Ruby test  accelerator. At the time, we thought we had found our MVP: we had  made encouraging technical progress and we had talked to several  potential customers who were excited about the product we were building.  Anything simpler seems “too simple” to be interesting.\n\nOur  mistake at that point was to go “heads down” and focus on building the  accelerator while minimizing our contact with users and customers (after  all, we knew how great it was and time spent talking to  customers was time we could be hacking!). We should have asking, “Is  there an even simpler version of this product that we can deliver sooner  to learn more about pricing, market size, and technical challenges?”\n\nIf  we had done so, we would have discovered:\n\nAfter  eventually discovering that setup and configuration was our primary  adoption problem (and after trying and failing to implement various  strategies to make it simple and easy), we tried to move to the other  end of the spectrum. Caliper was designed to provide value with zero  setup or configuration – users just provided a link to source code and  instantly got valuable data.\n\nUnfortunately, we again made the  mistake of focusing on engineering first and customer development  second. We released our first version to some moderate success and then  proceeded to continue to churn out features without really understanding  customer needs. Only later on, after finally engaging potential  customers did we realize that market was too small and price point was  to low to have Caliper sustain our company by itself.\n\nThis  is by no means a comprehensive list, but it is our hope that other  startups and founders-to-be can learn from our experiences, both  mistakes and successes. Doing a startup has been an incredible learning  experience for both Dan and I and we look forward to learning more in  the future – both first-hand and from the amazing group of entrepreneurs  and hackers that we’ve been privileged enough to know."}