{"title":"Control Things With Your Muscles","description":"Building a Wearable Sensor suite that Reads Muscle signals (SEMG), and other physiological signals, and use that to control stuff.","lang":"en","canonicalLink":"http://hackaday.io/project/4716-control-things-with-your-muscles","tags":["ongoing project","neurons","arduino","electronics","wearable","microcontroller","muscle","machine learning","C/C++","biosensor","Prosthetics","cyborg","neural network","avr","Weight lifting","ANN","SEMG","power lifting","athletics","muscle sensor","surface electromyoography","Artificial neural network","spinal cord","borg","cyborgs"],"image":"https://cdn.hackaday.io/images/resize/600x600/935231426185640436.jpg","videos":[],"text":"This week we address algorithms, code, and appearance. Or cases.\n\nLet's start with code. For a device like this, where we're not interested in doing any kind of medical work - plus we don't want nor need to deal with the FDA - and it's just involved in controlling digital outputs for lights, artificial muscles, servos, etc, you don't need a lot of accuracy. The Arduino's 10 bit ADC is sufficient for most project needs when it comes to that. That greatly simplifies our processing. The basic functional requirement is to read in the SEMG signal, map the signal out to the PWM ports of the TLC5940NT in ascending order, and allow for software interrupts using soft IRQ's for button push instances so that when the button is pushed, the MCP42XX digital pot either lowers the resistance or increases the resistance to increase or decrease the gain so we don't oversaturate the final output signal.\n\nThe Atmega328P we're using is the low powered one, which works at 3.3V. Obviously if our signal overshoots 3.3V, we won't get a useful reading, so having the gain adjustable on the fly is necessary.\n\nRight now, as it is, the program is a hack, due to the preliminary board being manufactured proof of concept. So, a lot of the dedicated serial channels that the Arduino uses isn't standardized across the board. Instead of the I2C port, which is the Analog 4 and 5 ports, we have it occupied by the switches for the MCP42XX, which is the SPI digital Pot. For the SPI, which typically is PWM 11, 12, and 13, we have that taken up by the TLC5940NT.\n\nThat's a real mess.\n\nAnyway, here is the flowchart program for the circuitry.\n\nAnd here's the code. Starting with the main function in the Arduino.\n\n#include \r#include \r#include \r\r#define Int_Pin1 A1  // assign Analog1 to be the Interrupt Pin 1, Up Pin\r#define Int_Pin2 A2  // assign Analog2 to be the Interrupt Pin 2, Down Pin\r\r#define analogPin A0  // select Pin 0 for analog input\r\rvolatile int state = LOW;\rvolatile int state2 = LOW;\r\rint StateUp;  // the button up state\rint StateDn;  // the button down state\rint PressUpNum;  // the number of button presses for the up button\rint PressDnNum;  // the number of button presses for the down button\r\rint valueUp;  // The previous value of the Up button\rint valueDn;  // The previous value of the Down button\r\rint slider = 5;  //setup variables for the digital pot 0\rint val;\r\rDigiPot mcp4251(5, 6, 7);  // Start instance mcp4251\r/* Format: DigiPot (CS, SCK, SDI) */\r\ruint8_t latest_interrupted_pin;\ruint8_t interrupt_count[2]={0};  // Setup two interrupt pins\r\rvoid setup() {\r  StateUp = digitalRead(Int_Pin1);  // Read in the initial state\r  StateDn = digitalRead(Int_Pin2);  // of the Interrupt Pins\r  \r  PCintPort::attachInterrupt(Int_Pin1, digipot_slider, CHANGE);  // Call the Interrupt  \r  PCintPort::attachInterrupt(Int_Pin2, digipot_slider, CHANGE);  // Call the Interrupt\r  \r  mcp4251.clear(0);  // Clear the pot 0\r  mcp4251.clear(1);  // Clear the pot 1\r  \r  Tlc.init();\r  Tlc.clear();\r  //Serial.begin(9600);\r  \r}\rvoid loop() {\r  \r  muscle_semg_read();\r  //Serial.println(slider);\r}\rvoid digipot_slider() {\r  \r  valueUp = digitalRead(Int_Pin1);  // read in the current state \r                                 // of the button up pin\r  valueDn = digitalRead(Int_Pin2);  // read in the current state\r    \r/* Start of the Decision Tree for Up and Down Buttons */\r  \r  if (valueUp != StateUp) {  // if the value changed\r    if (valueUp == HIGH) {        // and if the button is on\r      if (0 < slider < 10) {\r      // PressUpNum++;            // Add one to the number of presses\r      slider++;\r      \r      // Serial.println(PressUpNum);\r      // Serial.println(slider);\r      } \r    }\r  }\r  StateUp = valueUp;        // make the buttState current\r  \r  if (valueDn != StateDn) {  // if the value changed\r    if (valueDn == HIGH) {    // and the button returned (pull up)\r       if (0 < slider < 10) {\r         // PressDnNum++;\r         slider--;\r         // Serial.println(PressDnNum);\r         // Serial.println(slider);\r       } \r    }\r  }\r  StateDn = valueDn;      // make the buttState current\r  \r  if (slider < 0) {\r...\n\nRead more »\n\nAh, weight. It's the perennial First World problem, in an overly politically correct society. And it's the part of the circuit that we want to vastly reduce and size down.After we refined the circuitry, it was time to lay out the board and manufacture the PCB. We got to this point because as I attempted to make another basement, wire jumpered, ghetto board, my left over solder slag caused shorts and fried chips. I talked to Al, and he said to not even bother, since the proof of concept was solid, and I extensively tested my other hand made board. It was time to make something cleaner, smaller, and better. I'm a total dunce when it comes to PCB board design and software, like Altium Designer or EagleCAD, which is what Aleks had access to. However, for circuit schematics, I used gEDA, which is an excellent piece of software for anyone who isn't rolling in cash to do their circuit schematic.\n\nArtificial Muscle Control\n\nIt's about this time that I really started thinking through the applications for my concept, and the first concept that came to my mind, was in robotics. Which brings me back to my ancient 1990's thesis, A Smart Suit for Microgravity EnvironmentsDigital control of artificial muscles is a tricky problem. The problem with the current solutions out on the market today for artificial muscles, at least the kinds that make me think of an artificial muscle, is that they're not really digitally controllable. That's Shape Memory Alloys, IE. Nitinol wire, or shape memory polymers. Every Shape Memory substance requires heat or heat production for it to do the bending and contorting that makes it a muscle. And the problem with heat is the lag time for the material to absorb enough heat to result in a hysteresis, where the crystal structure, or whatever structure starts to rearrange itself into a different geometric form, resulting in a contracting element.And because the hysteresis is heat dependent, and depends on the overall amorphous shape of the SMA/SMP, you don't get good control over the element. Now contrast that with biological muscles.Biological muscles are formed of muscle fibers that ratchet against each other, with a myosin and actin element. Think car jack hoists. Much like a ratchet, they work in discrete steps with each other. You know what the crazy thing is about biological muscles? They're far better structurally for something resembling digital control. That's because muscle fibers have a discrete nature. They use calcium ions, which have a defined energetic value, to initiate the muscle innervation. Basically, the entire muscle fiber is in a potential state, except it's covered with a sheet of tropomyosin. Each calcium ion tugs a bit of that sheet away, exposing binding sites on myosin. The actin filament instantly latches onto those myosin sites, creating a muscle ratcheting effect, aka the contraction.You can read more about how the muscle works here.Each calcium ion, and each actin/myosin unit makes a defined, structural, energetically activated biomechanical unit. Say that 6 times fast. Anyway, that makes it a clear analog to digital.On top of that, not all of your muscle fibers activate at once when you innervate them. The only time you really see your muscles innervate almost at once is when you induce a massive shock to the muscle. That's why you hear stories of people who accidentally touched a massive circuit, get knocked out and find themselves 15 feet away. It wasn't a massive spark or explosion that knocked them back there. It was the shock that triggered their muscles to contract violently all at once. Now, if the contraction caused them to rigidly hold the electrical source, most likely they'd be dead. If the contraction caused them to leap back and let go of the source, more likely they'll still be alive. And when they woke up, that is, if they weren't dead, they felt really really sore. I know I did when I got hit!\n\nWorking with Artificial...\n\nRead more »\n\nSo now we get into the meat of the tech. The good stuff. The Biomedical Engineering coke. It's where the silicon meets the carbon road, where synthetic \"life\" meets organic \"life.\"\n\nThe blending of biology and physics was what got me into biomedical engineering in the first place. Meshing organic with inorganic has this perverse pull for me. Yes, I was the one who found the Borg queen in Star Trek Voyager, the Matrix human batteries, and anime cyborgs sexy as hell, especially with all the attachments put on em. Do I have a sick fetish? Maybe. Is it Visionary? Absolutely.\n\nI started down this path when I was 5 years old, and licked a nine volt battery. That buzz was what got me going. When I was ten, I dissected disposable cameras, and gave myself severe shocks from the flash capacitor as an experiment, and for fun. I also got hit by lightning when I was in college, but that's a story for another day. Since day one, I've had this strange predeliction for electricity and the body, and attaching hardware to my body, for good or bad, is very natural for me.\n\nNaturally I gravitated to muscles and electronics. So what better thing to work with than SEMG? Let's sing the Body Electric.\n\nAnd now for a lesson in Surface Electromyography, or SEMG for short.\n\nAn SEMG signal is an electrical wave that cascades down your muscle. That wave is generated when something called a Motor Unit Action Potential, MUAP, which is a combination of muscle neurons (Motor Neuron) and muscle fibers, starts with a discharge of a set of neuron potentials.\n\nThose potentials are formed from the separation of sodium and potassium - which are positive ions - and chloride ions - which are negative ions - inside of the neural cell synapse, which is that long, tenuous line in the neural cell circuit. At the end point of the neural cell, where the neural electrical discharge ends, it releases neurotransmitters into the muscle cells, which in turn releases cascades of calcium ions, and that triggers the muscle fibers to contract. Now you know why salt, bananas, milk and leafy greens are important for your diet.\n\nThat discharge wave cascades down your muscle, creating what's called a Motor Unit Action Potential Train, which is a long line of MUAP's discharging to the end of the muscle. That end, is where the muscle is attached to ligaments or tendons, which in turn are attached to skeletal bone. And that's why you need a ground near bone to complete the circuit.\n\nThe full electrical discharge is both motor neural cells discharging, and muscle potentials discharging, ending with one giant, cascade of voltages coming out from your muscles. Which gets really messy, and complicated looking. Like this.\n\nWhat the electrode is measuring is the muscle discharge from the calcium ions. Lost somewhere in that signal are the motor neuron cells, but those aren't that important to look at for our purposes.To read electrical signals from muscles, we start with a differential amplifier, aka a diff amp. You need the diff amp because it subtracts the voltage values measured between the two electrodes.All the diff amp does is it measures a point in the wave, versus another point in the wave, while the ground provides a base reference. When it subtracts those values, you have a voltage value from the muscle, and that's the signal you're working with.Now, some SEMG circuits use a single electrode, and a ground. Others, like the one we're using, use the belly of the muscle, the ending of the muscle (right where it attaches to tendons), and the ground. You can also get crazier with triple, quad electrodes to get as much signal value as possible. This improves the resolution of the signal, because of the number of contact points on the skin. But it also gets a lot more uncomfortable. There's a lot of metal shafing on your skin all in a concentrated point.\n\nRead more »"}